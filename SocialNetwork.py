{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "this is social network. you can type ? to show all the commands.\n",
      "\n",
      "(please enter command:) ?\n",
      "\n",
      "Documented commands (type help <topic>):\n",
      "========================================\n",
      "help\n",
      "\n",
      "Undocumented commands:\n",
      "======================\n",
      "create_group      delete_my_posts  follow_user    login            signup     \n",
      "create_post       follow_group     get_all_posts  logout           thumbs_down\n",
      "current_userInfo  follow_topic     get_my_posts   respond_to_post  thumbs_up  \n",
      "\n"
     ]
    }
   ],
   "source": [
    "import cmd\n",
    "import mysql.connector\n",
    "import pandas as pd\n",
    "\n",
    "class MysqlClient:\n",
    "    def __init__(self):\n",
    "        self.connection = mysql.connector.connect(\n",
    "            host = \"localhost\",\n",
    "            database = \"SocialNetwork\",\n",
    "            user = \"root\",\n",
    "            passwd = \"root123\"\n",
    "        )\n",
    "        self.cursor = self.connection.cursor()\n",
    "    \n",
    "    def runQuery(self, query, params = None):\n",
    "        self.cursor.execute(query, params)\n",
    "        return self.cursor\n",
    "    \n",
    "\n",
    "class SocialNetworkClient(cmd.Cmd):\n",
    "    intro = 'this is social network. you can type ? to show all the commands.\\n'\n",
    "    prompt = '(please enter command:) '\n",
    "    \n",
    "    def __init__(self):\n",
    "        super(SocialNetworkClient, self).__init__()\n",
    "        self.mysql_client = MysqlClient()\n",
    "        self.user_id = None\n",
    "\n",
    "    def do_signup(self, arg):\n",
    "        username = input(\"please enter your username: \")\n",
    "        if username != \"\":\n",
    "            user_id = self.mysql_client.runQuery(\"insert into User (username) values ('{}');\".format(username)).lastrowid\n",
    "            self.mysql_client.connection.commit();\n",
    "            print(\"User {} has been created. the user id is {}\".format(username, user_id))\n",
    "        else: \n",
    "            print(\"username can't be None.\");\n",
    "\n",
    "    def do_login(self, arg):\n",
    "        username = input(\"please enter your username: \")\n",
    "        user_info = self.mysql_client.runQuery(\"select * from user where username = '{}';\".format(username)).fetchall()\n",
    "        self.user_id = user_info[0][0]\n",
    "        if user_info:\n",
    "            print(\"{} Login successfully! your user id is {}\".format(username, self.user_id))\n",
    "        else:\n",
    "            print(\"username doesn't exist! \")\n",
    "\n",
    "    def do_logout(self, arg):\n",
    "        print(\"You have been logged out!\")\n",
    "        self.user_id = None\n",
    "        \n",
    "    def do_current_userInfo(self,arg):\n",
    "        if(self.user_id != None):\n",
    "            user_id = self.user_id;\n",
    "            user_info = self.mysql_client.runQuery(\"select * from user where user_ID = '{}';\".format(user_id)).fetchall()\n",
    "            if user_info:\n",
    "                print(\"Here is all the user information:\"+ \"\\n\" + \"(UserID, username, email, phone_NO, gender,vocation,religion,birthday)\"+\"\\n\"+\" {}\"\n",
    "                      .format(user_info))\n",
    "            else:\n",
    "                print(\"username doesn't exist! \")\n",
    "        else: \n",
    "            username = input(\"please enter the username: \")\n",
    "            user_info = self.mysql_client.runQuery(\"select * from user where username = '{}';\".format(username)).fetchall()\n",
    "            if user_info:\n",
    "                print(\"Here is all the user information:\"+ \"\\n\" + \"(username, email, phone_NO, gender,vocation,religion,birthday) {}\"\n",
    "                      .format(user_info))\n",
    "            else:\n",
    "                print(\"username doesn't exist! \")\n",
    "\n",
    "                \n",
    "    def do_create_post(self, arg):\n",
    "        topic = input(\"please create your post topic: \")\n",
    "        content_type = input(\"please identify your content type(text, image, link)\")\n",
    "        content = input(\"please create your post content: \")\n",
    "        try:\n",
    "            if topic and content_type and content:\n",
    "                topic_id = None\n",
    "                topic_id_info = self.mysql_client.runQuery(\"SELECT topic_ID FROM Topic WHERE topic_name = '{}';\"\n",
    "                                                           .format(topic)).fetchall()\n",
    "                if topic_id_info:\n",
    "                    topic_id = topic_id_info[0][0]\n",
    "                    print(\"content created successfully in {}! the topic id is {}\".format(topic ,topic_id))\n",
    "                else:\n",
    "                    # Insert the topic if topic does not exist\n",
    "                    topic_id = self.mysql_client.runQuery(\"INSERT INTO Topic VALUES (%s, %s);\", (topic_id, topic)).lastrowid\n",
    "                # Insert the post with the topic\n",
    "                if topic_id:\n",
    "                    post_id = self.mysql_client.runQuery(\"INSERT INTO Post (user_ID, content_type) VALUES (%s, %s);\", (self.user_id, content_type)).lastrowid\n",
    "                    if(content_type == \"text\"):\n",
    "                        self.mysql_client.runQuery(\"INSERT INTO text (user_ID, post_ID, txt) VALUES (%s, %s, %s);\", (self.user_id, post_id, content)).lastrowid\n",
    "                    elif(content_type == \"image\"):\n",
    "                        self.mysql_client.runQuery(\"INSERT INTO image (user_ID, post_ID, image_location) VALUES (%s, %s, %s);\", (self.user_id, post_id, content)).lastrowid\n",
    "                    elif(content_type == \"link\"):\n",
    "                        self.mysql_client.runQuery(\"INSERT INTO link (user_ID,post_ID, link) VALUES (%s, %s, %s);\", (self.user_id, post_id, content)).lastrowid\n",
    "                    else: \n",
    "                        print(\"please enter the correct content type.\")\n",
    "                    # Insert into Post_Topic \n",
    "                    print(\"content created successfully in the topic {}! the topic id is {}. The post id is {}\".format(topic ,topic_id, post_id))\n",
    "                    if post_id and (content_type == \"text\" or content_type == \"image\" or content_type == \"link\"):\n",
    "                        self.mysql_client.runQuery(\"INSERT INTO Post_Topic VALUES (%s, %s);\", [post_id, topic_id]).lastrowid\n",
    "                        self.mysql_client.connection.commit()\n",
    "                        \n",
    "        except mysql.connector.Error as error :\n",
    "            print(\"Create post failed with error: {}\".format(error))\n",
    "            self.mysql_client.connection.rollback()\n",
    "\n",
    "\n",
    "    def do_create_group(self, arg):\n",
    "        group_name = input(\"Input the group name: \")\n",
    "        invitee_id = input(\"Input the invitee user ID: \")\n",
    "\n",
    "        if not (group_name and invitee_id):\n",
    "            print(\"Missing input. Create group failed\")\n",
    "            return\n",
    "        try:\n",
    "            group_id = self.mysql_client.runQuery(\"insert into _Groups (group_id, group_Name) values (NULL, '{}');\".format(group_name)).lastrowid\n",
    "            self.mysql_client.cursor.executemany(\"insert into Group_Member (group_ID, user_ID) values (%s, %s);\", \n",
    "                                                 [(group_id, self.user_id),(group_id, int(invitee_id))])\n",
    "            self.mysql_client.connection.commit()\n",
    "            print(\"You and user {} has join group {} successfully. the following is the group information\".format(invitee_id, group_id))\n",
    "            group_Info_Query = self.mysql_client.runQuery(\"select * from _groups inner join group_member using(group_ID);\").fetchall()\n",
    "            group_Info = pd.DataFrame(group_Info_Query, columns=[\n",
    "                 'group_ID',\n",
    "                 'group_Name',\n",
    "                 'user_ID'\n",
    "            ])\n",
    "            print(group_Info)\n",
    "        except mysql.connector.Error as error :\n",
    "            print(\"Create group failed with error: {}\".format(error))\n",
    "            self.mysql_client.connection.rollback()\n",
    "\n",
    "\n",
    "    def do_follow_group(self, arg):\n",
    "        group_id = input(\"Input the group ID: \")\n",
    "\n",
    "        if not group_id:\n",
    "            print(\"Missing input. Follow group failed\")\n",
    "            return\n",
    "        try:\n",
    "            result = self.mysql_client.runQuery(\"select * from _groups where group_ID = {}\".format(group_id)).fetchall()\n",
    "\n",
    "            if not result:\n",
    "                print(\"Group not found!\")\n",
    "            else:\n",
    "                # follow group if group exist\n",
    "                self.mysql_client.runQuery(\"insert into Group_Member (group_ID, user_ID) values (%s, %s);\", (group_id, self.user_id))\n",
    "                self.mysql_client.connection.commit()\n",
    "                print(\"You have follow group {} successfully.\".format(group_id)+\" Here is the group inforamtion for all groups\")\n",
    "                group_Info_Query = self.mysql_client.runQuery(\"select * from _groups inner join group_member using(group_ID);\").fetchall()\n",
    "                group_Info = pd.DataFrame(group_Info_Query, columns=[\n",
    "                    'group_ID',\n",
    "                    'group_Name',\n",
    "                    'user_ID'\n",
    "                ])\n",
    "                self.mysql_client.connection.commit()\n",
    "                print(group_Info)\n",
    "        except mysql.connector.Error as error :\n",
    "            print(\"Follow group failed with error: {}\".format(error))\n",
    "            self.mysql_client.connection.rollback()\n",
    "\n",
    "\n",
    "    def do_follow_topic(self, arg):\n",
    "        topic_id = input(\"Input topic id: \")\n",
    "\n",
    "        if not topic_id:\n",
    "            print(\"Missing input. Follow topic failed.\")\n",
    "            return\n",
    "        \n",
    "        try:\n",
    "            find_topic_query = \"select * from Topic where topic_ID = {};\".format(topic_id)\n",
    "            result = self.mysql_client.runQuery(find_topic_query).fetchall()\n",
    "\n",
    "            if not result:\n",
    "                print(\"Topic not found!\")\n",
    "            else:\n",
    "                self.mysql_client.runQuery(\"insert into Topic_Follower values (%s, %s);\", (topic_id, self.user_id))\n",
    "                self.mysql_client.connection.commit()\n",
    "                print(\"You have follow topic {} successfully.\".format(topic_id)+\"Here are all the topics and their followers:\"+\"\\n\")\n",
    "                follow_results = self.mysql_client.runQuery(\"select * from topic_follower;\").fetchall()\n",
    "                topic_followers = pd.DataFrame(follow_results, columns=[\n",
    "                    'topic_ID',\n",
    "                    'follower_user_ID'\n",
    "                ])\n",
    "                print(topic_followers)\n",
    "        except mysql.connector.Error as error :\n",
    "            print(\"Follow topic failed with error: {}\".format(error))\n",
    "            self.mysql_client.connection.rollback()\n",
    "\n",
    "\n",
    "    def do_follow_user(self, arg):\n",
    "        followee_id = input(\"please enter the id of the user you want to follow: \")\n",
    "\n",
    "        if not followee_id:\n",
    "            print(\"Missing input. Follow user failed!\")\n",
    "            return\n",
    "        try:\n",
    "            user_info = self.mysql_client.runQuery(\"select * from User where user_ID = {};\".format(followee_id)).fetchall()\n",
    "\n",
    "            if not user_info:\n",
    "                print(\"Followee not found\")\n",
    "            else:\n",
    "                if(int(followee_id) != self.user_id):\n",
    "                    self.mysql_client.runQuery(\"insert into User_Follower values (%s, %s);\", (followee_id, self.user_id))\n",
    "                    self.mysql_client.connection.commit()\n",
    "                    print(\"You have follow user {} successfully. the users and their follower information are listed as follows:\".format(followee_id))\n",
    "                    follower_query = '''\n",
    "                    select * from user_follower;'''\n",
    "                    follow_result = self.mysql_client.runQuery(follower_query).fetchall()\n",
    "                    df = pd.DataFrame(follow_result, columns=[\n",
    "                        'user_ID',\n",
    "                        'follower_ID'\n",
    "                    ])\n",
    "                    print(df)\n",
    "                    return\n",
    "                else:\n",
    "                    print(\"you can not follow yourself\")\n",
    "                    return\n",
    "        except mysql.connector.Error as error :\n",
    "            print(\"Follow user failed with error: {}\".format(error))\n",
    "            self.mysql_client.connection.rollback()       \n",
    "\n",
    "\n",
    "    def do_thumbs_up(self, arg):\n",
    "        post_id = input(\"Input post id: \")\n",
    "\n",
    "        if not post_id:\n",
    "            print(\"Missing input. Thumbs up failed\")\n",
    "\n",
    "        try:\n",
    "            post_info = self.mysql_client.runQuery(\"select * from Post where post_ID = {};\".format(post_id)).fetchall()\n",
    "\n",
    "            if not post_info:\n",
    "                print(\"Post not found\")\n",
    "            else:\n",
    "                self.mysql_client.runQuery(\"update Post set thumbs_up = thumbs_up + 1 where post_ID = {};\".format(post_id))\n",
    "                self.mysql_client.connection.commit()\n",
    "                print(\"You have thumbed up post {} successfully.\".format(post_id))\n",
    "        except mysql.connector.Error as error :\n",
    "            print(\"Thumbs up failed with error: {}\".format(error))\n",
    "            self.mysql_client.connection.rollback()  \n",
    "        \n",
    "    \n",
    "    def do_thumbs_down(self, arg):\n",
    "        post_id = input(\"Input post id: \")\n",
    "\n",
    "        if not post_id:\n",
    "            print(\"Missing input. Thumbs down failed\")\n",
    "\n",
    "        try:\n",
    "            result = self.mysql_client.runQuery(\"select * from Post where post_ID = {};\".format(post_id)).fetchall()\n",
    "            if not result:\n",
    "                print(\"Post not found\")\n",
    "            else:\n",
    "                self.mysql_client.runQuery(\"update Post set thumbs_down = thumbs_down + 1 where post_ID = {};\".format(post_id))\n",
    "                self.mysql_client.connection.commit()\n",
    "                print(\"You have thumbed down post {} successfully.\".format(post_id))\n",
    "        except mysql.connector.Error as error :\n",
    "            print(\"Thumbs down failed with error: {}\".format(error))\n",
    "            self.mysql_client.connection.rollback()  \n",
    "\n",
    "\n",
    "    def do_respond_to_post(self, arg):\n",
    "        post_id = input(\"Input post id: \")\n",
    "        content_type = input(\"Input type of content you want to respond(text, image, or link):\")\n",
    "        response = input(\"Input response: \")\n",
    "\n",
    "        if not (post_id and response):\n",
    "            print(\"Missing input. Respond to post failed.\")\n",
    "        try:\n",
    "            result = self.mysql_client.runQuery(\"select * from Post where post_ID = {};\".format(post_id)).fetchall()\n",
    "            if not result:\n",
    "                print(\"Post not found\")\n",
    "            else:\n",
    "                respond_post_id = self.mysql_client.runQuery(\"insert into Post (user_ID, content_type) values (%s, %s);\", (self.user_id, content_type)).lastrowid\n",
    "                if(content_type == \"text\"):\n",
    "                    self.mysql_client.runQuery(\"insert into text (post_ID, user_id, txt) values (%s, %s, %s);\", (respond_post_id, self.user_id, response))\n",
    "                elif(content_type == \"image\"):\n",
    "                    self.mysql_client.runQuery(\"insert into image (post_ID, user_id, image_location) values (%s, %s, %s);\", (respond_post_id, self.user_id, response))\n",
    "                elif(content_type == \"link\"):\n",
    "                    self.mysql_client.runQuery(\"insert into link (post_ID, user_id, link) values (%s, %s, %s);\", (respond_post_id, self.user_id, response))\n",
    "                else:\n",
    "                    print(\"respond type not supported!\");\n",
    "                self.mysql_client.runQuery(\"insert into Post_Respond values (%s, %s);\", (post_id, respond_post_id))\n",
    "                self.mysql_client.connection.commit()\n",
    "                print(\"You have responded to post {} successfully. the cooresponding post and respond information is listed as follows\".format(post_id))\n",
    "                respond_query = '''\n",
    "                select * from post inner join post_respond using (post_id);'''\n",
    "                result = self.mysql_client.runQuery(respond_query).fetchall()\n",
    "                df = pd.DataFrame(result, columns=[\n",
    "                        'post_ID',\n",
    "                        'user_ID',\n",
    "                        'content_type',\n",
    "                        'thumbs_up',\n",
    "                        'thumbs_down',\n",
    "                        'create_time',\n",
    "                        'respond_ID'\n",
    "                ])\n",
    "                print(df)\n",
    "        except mysql.connector.Error as error :\n",
    "            print(\"Respond to post failed with error: {}\".format(error))\n",
    "            self.mysql_client.connection.rollback()  \n",
    "\n",
    "    def do_delete_my_posts(self, arg):\n",
    "        try:\n",
    "            self.mysql_client.runQuery(\"delete from post where user_id={};\".format(self.user_id))\n",
    "            print(\"you have delete your posts successfully!\")\n",
    "        except mysql.connector.Error as error :\n",
    "            print(\"delete user posts failed with error: {}\".format(error))\n",
    "            self.mysql_client.connection.rollback()   \n",
    "\n",
    "    def do_get_all_posts(self, arg):\n",
    "        try:\n",
    "            # Get the new post from the followed topic and followed user\n",
    "            get_all_post_query = '''\n",
    "                select * from(\n",
    "                select * from (\n",
    "                    select * from (select post.*, text.txt as 'content(txt/image_location/link)' from post \n",
    "                                   inner join text using (post_ID)\n",
    "                                   union select post.*, image.image_location from post \n",
    "                                   inner join image using (post_ID)\n",
    "                                   union select post.*, link.link from post \n",
    "                                   inner join link using (post_ID)) as table1\n",
    "                                inner join post_topic using (post_ID)) as table2\n",
    "                            inner join topic using(topic_ID)) as table3 order by post_ID;'''\n",
    "            result = self.mysql_client.runQuery(get_all_post_query).fetchall()\n",
    "\n",
    "            df = pd.DataFrame(result, columns=[\n",
    "                    'topic_ID',\n",
    "                    'post_ID',\n",
    "                    'user_ID',\n",
    "                    'content_type',\n",
    "                    'thumbs_up',\n",
    "                    'thumbs_down',\n",
    "                    'create_time',\n",
    "                    'content(txt/ image location/ link)',\n",
    "                    'topic_name'\n",
    "            ])\n",
    "            print(df.iloc[:,[1,0,2,3,4,5,6,7,8]])\n",
    "        except mysql.connector.Error as error :\n",
    "            print(\"Get all posts failed with error: {}\".format(error))\n",
    "            self.mysql_client.connection.rollback()    \n",
    "\n",
    "    def do_get_my_posts(self, arg):\n",
    "        try:\n",
    "            query_result = self.mysql_client.runQuery(\n",
    "            ''' select * from(\n",
    "                select * from (\n",
    "                    select * from (select post.*, text.txt as 'content(txt/image_location/link)' from post \n",
    "                                   inner join text using (post_ID) where post.user_id ={}\n",
    "                                   union select post.*, image.image_location from post \n",
    "                                   inner join image using (post_ID) where post.user_id ={}\n",
    "                                   union select post.*, link.link from post \n",
    "                                   inner join link using (post_ID) where post.user_id ={}) as table1\n",
    "                                inner join post_topic using (post_ID)) as table2\n",
    "                            inner join topic using(topic_ID)) as table3 order by post_ID;'''\n",
    "                            .format(self.user_id,self.user_id,self.user_id)).fetchall()\n",
    "            if not query_result:\n",
    "                print(\"there is nothing in your post.\")\n",
    "            else:\n",
    "                my_posts = pd.DataFrame(query_result, columns=[\n",
    "                    'topic_ID',\n",
    "                    'post_ID',\n",
    "                    'user_ID',\n",
    "                    'content_type',\n",
    "                    'thumbs_up',\n",
    "                    'thumbs_down',\n",
    "                    'create_time',\n",
    "                    'content(txt/ image location/ link)',\n",
    "                    'topic_name'\n",
    "                ])\n",
    "                print(my_posts.iloc[:,[1,0,2,3,4,5,6,7,8]])\n",
    "        except mysql.connector.Error as error :\n",
    "            print(\"Get my posts failed with error: {}\".format(error))\n",
    "            self.mysql_client.connection.rollback() \n",
    "\n",
    "\n",
    "if __name__ == '__main__':\n",
    "    SocialNetworkClient().cmdloop() \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
